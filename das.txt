from sympy import *
import numpy as np
from fractions import Fraction


class Calc:
	Eps = np.array([Fraction(0.577), Fraction(1), Fraction(1.732), Fraction(3.732), Fraction(11.43)])
	R2 = 288.3
	R1 = 287
	z1 = 1
	z2 = 1

	k1 = 1.4
	k2 = 1.33


	res_fcs = []
	lst = []
	m_fz = []
	@staticmethod
	def comparefc( ):
		pass

	

	@staticmethod
	def writeF():
		f = open('test_fcs75(5).txt', 'w')
		# f.write(str(Calc.m_fz))
		for item in Calc.lst:
			f.write(str(item) + '\n')

		f.close()

	@staticmethod
	def main_calc(piks, pi0, theta2, r_vnesh, r_vnutr, r2, eps, rm, r):
		''' not finished '''





		r2 = round(r2, 3)
		rm = round(rm, 3)

		# b = (2 * rm) / ((1 - r2) * ((2 * rm) - r2 - 1))
		b = (2 * rm) / ((r2 ** 2) - (2 * rm * r2 ) + 1 + 2 * rm)

		a = -1 * (b / (2 * rm))


		c = 1 - a - b



		m = (np.log(r2 * (Calc.R1 / Calc.R2) * (1 / theta2))) / np.log (r2)
		r_m = round(m, 3)

		M1 = np.sqrt(2 * (((piks ** (1 / (Calc.k1 - 1) / Calc.k1)) - 1) / (Calc.k1 - 1)))
		rM1 = round(M1, 3)

		A = ((Calc.k1 - 1) / (2 * r_m)) * (rM1 ** 2) / (1 + (1 / eps ** 2))

		mf1 = rM1 / ((1 + (1 / (eps ** 2))) ** 0.5)

		rmf1 = round(mf1, 3)

		mz1 = (((rM1 ** 2) / (1 + eps ** 2)) ** (1 / 2))
		rmz1 = round(mz1, 3)

		# Calc.m_fz.append({'mf1 = ',rmf1, 'mz1 = ',rmz1})

		Fi2 = 1 - A * (1 / ((r2 ** (2 * r_m)) - 1))

		gamma = ((Calc.k1 * (Calc.k2 - 1) * Calc.z1 * Calc.R1) / (2 * Calc.k2 * Calc.z2 * Calc.R2)) * \
				((rM1 ** 2) / ((1 + (1 / eps ** 2)) * (r2 ** (2 * r_m)) * theta2 * Fi2) *
				 (1 - ((1 / pi0) ** ((Calc.k2 - 1) / Calc.k2))) * (1 / (Fi2 ** ((Calc.k1 * (Calc.k2 - 1)) / (Calc.k2 * (Calc.k1 - 1))))))

		B = (Calc.k1 * (Calc.k2 - 1) * (rM1 ** 2) * Calc.z1 * Calc.R1) / \
			(2 * Calc.k2 * (1 + (1 / (eps ** 2))) * (r2 ** (2 * r_m)) * theta2 * Fi2 * Calc.z2 * Calc.R2)

		fiSt3 = ( 1 - ((0.2 * rM1 ** 2) / ((1 + (1/ (eps ** 2))) * r_m) * (( 1 / ( r ** (2 * r_m) )) - 1) )**3)

		_Mzm = a * ( rm ** 2 ) + b * rm + c

		_Mz = a * (r ** 2) + b * r + c

		

		f = fiSt3 * _Mz * r

		dr = symbols ('r')

		integr = integrate(f, (dr, r2, 1))

		res_fc = integr / (0.5 * rM1)
		res_fc = round(res_fc, 3)
		Calc.res_fcs.append(res_fc)
	
		Calc.lst.append({
			'Pikc': piks,
			'r2': r2,
			'rm': rm,
			'res_fc': res_fc,
			'M1': rM1,
			'm': r_m,
			'fi': 75,
			'mz1': rmz1,
			'mf1': rmf1

		})
		print (str(Calc.lst))

			# else: Calc.fc += 0.01




		if r_vnesh is not None:
			mf_vnesh = rM1 /\
					   ((1 + 1 / eps ** 2) ** 0.5 * (1 - A * (1 / (r_vnesh ** (2 * r_m)) - 1)) ** 0.5 * r_vnesh ** (2 * r_m))




			return mf_vnesh



		if r_vnutr is not None:
			mf_vnutr = (1 / r2 ** r_m) * ((r_vnutr / r2) ** 2) * (((Calc.k1 * Calc.R1) / (Calc.k2 * Calc.R2)) ** 0.5) * \
					   (rM1 / (((1 + (1 / eps ** 2)) ** 0.5) * ((1 - B * (1 - ((r_vnutr / r2) ** (2 * gamma)))) ** 0.5)))
			return mf_vnutr